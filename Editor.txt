Editor

이중연결리트(double linked list) 
DLL클래스는 double linked list를 나타낸다 목록에는 노드의 저장된 값을 나타내는 item 이전 노드를 가리키는 prev 다음 노드를 가리키는 next가 있다. 

그 이후 head와 tail에 더미노드를 만든다 head는 리스트의 시작 tail은 리스트의 끝을 기리키며 이전노드에 헤드 노드를 next 값에 None을 저장한다. 그리고 head노드와 tail 노드를 연결해준다. 그리고 cur은 현재 위치를 저장하는 변수로 변수를 초기화 할때 위치할 노드를 tail노드로 선택한다.이는 빈 문자열의 경우 커서가 가장 마지막 노드인 tail 노드의 왼쪽에 위치해 있어야 하기 때문이다.

함수 insert 에서는 prevnode와 nextnode 를 이용하여 원하는 위치에 node를 삽입하는 함수이다. 삽입하는 Node 의 다음 Node를 이전노드의 next로 가리키게 하고 새로운 노드의 prev는 이전 노드를 가리키게 한다.


함수 pop은 특정 노드를 삭제한다. 특정노드 x를 삭제하기 위해 이전노드의 next를 r로 다음 노드의 prev를 f호 바꾸면 삭제하려는 노드와 이전, 다음 노드가 끊어지게 되므로 연결리스트에서 x 가 삭제 된다.

함수 printlist는 목록의 항목을 순서대로 인쇄한다.
변수 p를 self.head노드의 다음 노드로 가리킨다. 여기서 self.head노드는 더미 노드이다. p가 tail 노드를 가리킬때 까지 while 문을 돌린다. 이때 다음 노드가 self.tail이 아니면 문자를 출력한다.
이때 입력 받은 문자열을 s 라는 리스트에 저장하고 DLL클래스를 사용하여 리스트에 저장한다.
이제 for 문을 사용하여 입력에 따라 노드를 추가하거나 삭제하며 커서를 구현한다.
 
우선 입력받은 문자열을 리스트의 tail노드 앞에 삽입하고 리스트를 구성한다 그리고 for 문을 하나 더 사용해서 입력받은 명령어의 개수만큼 반복한다.
입력 받은 명령어가 L인 경우 왼쪽 노드가 head노드가 아닌 왼쪽 노드로 커서를 이동시킨다.
D일 경우 오른쪽 노드가 tail노드가 아니라면 오른쪾 노드로 커서를 이동시킨다.
B일 경우 현재 커서의 왼쪽 노드가 head 노드가 아니라면 왼쪽 노드를 삭제한다.
위의 경우 다 만족하지 않으면 입력 받은 문자를 현재 커서의 위치에 삽입한다. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import sys
input = sys.stdin.readline


class DLL:
    class Node:
        def __init__(self, item, prev, next):
            self.item = item
            self.prev = prev
            self.next = next

    def __init__(self):
        self.head = self.Node(None, None, None)
        self.tail = self.Node(None, self.head, None)
        self.head.next = self.tail
        self.cur = self.tail

    def insert(self, p, item):
        t = p.prev
        n = self.Node(item, t, p)
        p.prev = n
        t.next = n

    def pop(self, x):
        f = x.prev
        r = x.next
        f.next = r
        r.prev = f

    def printlist(self):
        p = self.head.next
        while p != self.tail:
            if p.next != self.tail:
                print(p.item, end="")
            else:
                print(p.item)
            p = p.next


s = list(input().rstrip())
dl = DLL()
for i in range(len(s)):
    dl.insert(dl.tail, s[i])

for i in range(int(input())):
    o = input()
    if (o[0] == "L"):
        if (dl.cur.prev.prev != None):
            dl.cur = dl.cur.prev
    elif (o[0] == "D"):
        if (dl.cur.next != None):
            dl.cur = dl.cur.next
    elif (o[0] == "B"):
        if (dl.cur.prev.prev != None):
            dl.pop(dl.cur.prev)
    else:
        dl.insert(dl.cur, o[2])
dl.printlist()



