하노이탑
n = int(input())
def hanoi(n, a, b, c):
    if n == 1:
        print(a, c)
    else:
        hanoi(n - 1, a, c, b)
        print(a, c)
        hanoi(n - 1, b, a, c)
sum = 1
for i in range(n - 1):
    sum = sum * 2 + 1
print(sum)
hanoi(n, 1, 2, 3)



하노이 탑 문제는 다음과 같습니다. 세 개의 기둥과 그 중 하나에 n 개의 크기가 다른 원판이 쌓여있습니다. 가장 왼쪽의 기둥에는 원판들이 크기가 작은 순서로 쌓여 있으며, 가장 큰 원판이 맨 아래에 있습니다. 이 상태에서 모든 원판을 가장 오른쪽의 기둥으로 옮겨야 합니다. 이때 한 번에 하나의 원판만 옮길 수 있으며, 어떤 큰 원판도 작은 원판 위에 올려놓을 수 없습니다.

코드를 살펴보면, 우선 input() 함수를 사용하여 변수 n에 사용자가 입력한 값을 저장합니다. 그리고 하노이 탑 문제를 해결하기 위해 재귀 함수인 hanoi() 함수를 정의합니다. 이 함수는 4개의 매개변수를 받아옵니다.

n: 이번에 옮길 원판의 개수
a: 원판이 현재 있는 기둥의 번호
b: 원판을 옮길 때 거쳐가는 기둥의 번호
c: 원판을 옮길 기둥의 번호
만약 이번에 옮길 원판의 개수가 1개라면, 그냥 a에서 c로 옮기면 됩니다. 따라서 print(a, c)를 통해 이동 경로를 출력합니다.

그 외의 경우, n-1개의 원판을 a에서 c를 거쳐 b로 옮긴 후, n번째 원판을 a에서 c로 옮기고, 다시 n-1개의 원판을 b에서 a를 거쳐 c로 옮깁니다. 이를 위해 재귀적으로 hanoi() 함수를 호출합니다.

이어서, 변수 sum을 1로 초기화합니다. 그리고 for 루프를 돌며 sum에 2의 i승을 곱한 후 1을 더해 저장합니다. 이를 통해 하노이 탑 문제를 해결하는 데 필요한 최소 이동 횟수를 구할 수 있습니다.

마지막으로, hanoi(n, 1, 2, 3)을 호출하여 n개의 원판을 1번 기둥에서 3번 기둥으로 이동시키는 경로를 출력합니다